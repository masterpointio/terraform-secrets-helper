name: Trunk Upgrade

on:
  schedule:
    # On the first day of every month @ 8am
    - cron: 0 8 1 * *
  workflow_dispatch: {}

permissions: read-all

jobs:
  trunk-upgrade:
    runs-on: ubuntu-latest
    permissions:
      # For trunk to create PRs
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Create Token for MasterpointBot App
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a #v2.1.0
        id: generate-token
        with:
          app_id: ${{ secrets.MP_BOT_APP_ID }}
          private_key: ${{ secrets.MP_BOT_APP_PRIVATE_KEY }}

      - name: Upgrade
        id: trunk-upgrade
        uses: trunk-io/trunk-action/upgrade@4d5ecc89b2691705fd08c747c78652d2fc806a94 # v1.1.19
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          reviewers: "@masterpointio/masterpoint-internal"
          prefix: "chore: "

      - name: Wait for checks to pass + Merge PR
        if: steps.trunk-upgrade.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.MASTERPOINT_TEAM_PAT }}
          PR_NUMBER: ${{ steps.trunk-upgrade.outputs.pull-request-number }}
          REPO_URL: https://github.com/${{ github.repository }}
        run: |
          set -euo pipefail

          # Helper functions
          get_checks() {
            local check_type="$1"
            if [ "$check_type" = "required" ]; then
              gh pr checks "$PR_NUMBER" --required --json state,bucket 2>/dev/null || echo "[]"
            else
              gh pr checks "$PR_NUMBER" --json state,bucket 2>/dev/null || echo "[]"
            fi
          }

          count_checks() {
            echo "$1" | jq '. | length'
          }

          has_failed_checks() {
            echo "$1" | jq -e '.[] | select(.bucket=="fail")' >/dev/null 2>&1
          }

          count_pending_checks() {
            echo "$1" | jq '[.[] | select(.state!="SUCCESS" or .bucket!="pass")] | length'
          }

          approve_and_merge_pr() {
            local approval_message="$1"
            echo "Auto-approving and merging PR $REPO_URL/pull/$PR_NUMBER..."
            gh pr review "$PR_NUMBER" --approve --body "$approval_message"
            gh pr merge "$PR_NUMBER" --squash --delete-branch --admin
          }

          # Main
          # Allow time for checks to initialize
          echo "Waiting 30 seconds for checks to initialize..."
          sleep 30

          # Get required checks only (GitHub only requires these for merge)
          REQUIRED_CHECKS=$(get_checks "required")
          echo "Required checks: $REQUIRED_CHECKS"

          REQUIRED_COUNT=$(count_checks "$REQUIRED_CHECKS")

          # Handle case with no required checks - can merge immediately
          if [ "$REQUIRED_COUNT" -eq 0 ]; then
            echo "No required status checks configured. PR is ready to merge."
            echo "Proceeding with auto-approval and merge..."
            approve_and_merge_pr "Auto-approved by trunk upgrade workflow (no required status checks)"
            exit 0
          fi

          echo "Waiting for $REQUIRED_COUNT required status checks to pass..."

          # Wait for required checks to complete
          while true; do
            CURRENT_CHECKS=$(get_checks "required")
            echo "Current checks status: $CURRENT_CHECKS"

            # Check for failed checks
            if has_failed_checks "$CURRENT_CHECKS"; then
              echo "One or more checks have failed. Exiting..."
              exit 1
            fi

            # Check if all required checks have passed
            PENDING_COUNT=$(count_pending_checks "$CURRENT_CHECKS")
            if [ "$PENDING_COUNT" -eq 0 ]; then
              approve_and_merge_pr "Auto-approved by trunk upgrade workflow (all required checks passed)"
              break
            else
              echo "Some required checks are still running or pending ($PENDING_COUNT remaining). Retrying in 30s..."
              sleep 30
            fi
          done
